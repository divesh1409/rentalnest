package com.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.dto.PropertyDTO;
import com.app.services.PropertyService;

@RestController
@RequestMapping("/api/properties")
@CrossOrigin("*")
public class PropertyController {

	@Autowired
	private PropertyService propertyService;

	@PostMapping("/create")
	public ResponseEntity<PropertyDTO> createProperty(@RequestBody PropertyDTO propertyDTO) {
		PropertyDTO createdProperty = propertyService.createProperty(propertyDTO);
		return ResponseEntity.ok(createdProperty);
	}

	@PutMapping("/update/{id}")
	public ResponseEntity<PropertyDTO> updateProperty(@PathVariable int id, @RequestBody PropertyDTO propertyDTO) {
		PropertyDTO updatedProperty = propertyService.updateProperty(id, propertyDTO);
		return ResponseEntity.ok(updatedProperty);
	}

	@GetMapping("/getbyid/{id}")
	public ResponseEntity<PropertyDTO> getPropertyById(@PathVariable int id) {
		PropertyDTO property = propertyService.getPropertyById(id);
		return ResponseEntity.ok(property);
	}

	@PreAuthorize("hasRole('ADMIN')")
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteProperty(@PathVariable int id) {
		propertyService.deleteProperty(id);
		return ResponseEntity.noContent().build();
	}

	@GetMapping("/getallproperties")
	public ResponseEntity<List<PropertyDTO>> getAllProperties() {
		List<PropertyDTO> properties = propertyService.getAllProperties();
		return ResponseEntity.ok(properties);
	}

	@GetMapping("/landlord/{landlordId}")
	public ResponseEntity<List<PropertyDTO>> getPropertiesByLandlord(@PathVariable int landlordId) {
		List<PropertyDTO> properties = propertyService.getPropertiesByLandlord(landlordId);
		return ResponseEntity.ok(properties);
	}

	@GetMapping("/status/{status}")
	public ResponseEntity<List<PropertyDTO>> getPropertiesByStatus(@PathVariable String status) {
		List<PropertyDTO> properties = propertyService.getPropertiesByStatus(status);
		return ResponseEntity.ok(properties);
	}
}
