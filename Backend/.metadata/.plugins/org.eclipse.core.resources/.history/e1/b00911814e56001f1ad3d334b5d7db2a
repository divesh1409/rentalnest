@Service
public class PropertyServiceImpl implements PropertyService {

    @Autowired
    private PropertyRepository propertyRepository;

    @Autowired
    private UserRepository userRepository;

    @Override
    @Transactional
    public PropertyDTO createProperty(PropertyDTO propertyDTO) {
        Property property = new Property();
        property.setAddress(propertyDTO.getAddress());
        property.setDescription(propertyDTO.getDescription());
        property.setRent(propertyDTO.getRent());
        property.setStatus(propertyDTO.getStatus());
        property.setAvailableFrom(propertyDTO.getAvailableFrom());
        property.setAvailableTo(propertyDTO.getAvailableTo());
        property.setImageURLs(propertyDTO.getImageURLs());

        Optional<User> landlord = userRepository.findById(propertyDTO.getLandlordID());
        landlord.ifPresent(property::setLandlord);

        property = propertyRepository.save(property);
        return convertToDTO(property);
    }

    @Override
    @Transactional
    public PropertyDTO updateProperty(Long propertyId, PropertyDTO propertyDTO) {
        Optional<Property> optionalProperty = propertyRepository.findById(propertyId);
        if (optionalProperty.isPresent()) {
            Property property = optionalProperty.get();
            property.setAddress(propertyDTO.getAddress());
            property.setDescription(propertyDTO.getDescription());
            property.setRent(propertyDTO.getRent());
            property.setStatus(propertyDTO.getStatus());
            property.setAvailableFrom(propertyDTO.getAvailableFrom());
            property.setAvailableTo(propertyDTO.getAvailableTo());
            property.setImageURLs(propertyDTO.getImageURLs());

            Optional<User> landlord = userRepository.findById(propertyDTO.getLandlordID());
            landlord.ifPresent(property::setLandlord);

            property = propertyRepository.save(property);
            return convertToDTO(property);
        }
        throw new RuntimeException("Property not found");
    }

    @Override
    public PropertyDTO getPropertyById(Long propertyId) {
        Optional<Property> property = propertyRepository.findById(propertyId);
        return property.map(this::convertToDTO).orElseThrow(() -> new RuntimeException("Property not found"));
    }

    @Override
    @Transactional
    public void deleteProperty(Long propertyId) {
        if (!propertyRepository.existsById(propertyId)) {
            throw new RuntimeException("Property not found");
        }
        propertyRepository.deleteById(propertyId);
    }

    @Override
    public List<PropertyDTO> getAllProperties() {
        List<Property> properties = propertyRepository.findAll();
        return properties.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @Override
    public List<PropertyDTO> getPropertiesByLandlord(Long landlordId) {
        List<Property> properties = propertyRepository.findByLandlord_UserId(landlordId); // Use updated method
        return properties.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @Override
    public List<PropertyDTO> getPropertiesByStatus(String status) {
        List<Property> properties = propertyRepository.findByStatus(status);
        return properties.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    private PropertyDTO convertToDTO(Property property) {
        PropertyDTO propertyDTO = new PropertyDTO();
        propertyDTO.setPropertyID(property.getPropertyID());
        propertyDTO.setLandlordID(property.getLandlord().getUserId()); // Corrected method name
        propertyDTO.setAddress(property.getAddress());
        propertyDTO.setDescription(property.getDescription());
        propertyDTO.setRent(property.getRent());
        propertyDTO.setStatus(property.getStatus());
        propertyDTO.setAvailableFrom(property.getAvailableFrom());
        propertyDTO.setAvailableTo(property.getAvailableTo());
        propertyDTO.setImageURLs(property.getImageURLs());
        return propertyDTO;
    }
}
